{"id":"lethe","script":"//* TITLE Lethe **//\r\n//* VERSION 1.1.1 **//\r\n//* DESCRIPTION Forgets posts once they scroll off the screen. **//\r\n//* DEVELOPER hobinjk **//\r\n//* FRAME false **//\r\n//* BETA true **//\r\n\r\n\r\n/** Export Lethe */\r\nXKit.extensions.lethe = new Lethe();\r\n\r\nfunction Lethe() {\r\n  this.TOP_CUTOFF = -500;\r\n  this.running = false;\r\n  this.scrollWaiting = false;\r\n  this.hiddenPosts = [];\r\n  this.preferences = {\r\n    'sep0': {\r\n      text: 'Options',\r\n      type: 'separator'\r\n    }\r\n  };\r\n\r\n}\r\n\r\n/**\r\n * Run Lethe\r\n */\r\nLethe.prototype.run = function() {\r\n  if (!XKit.interface.where().dashboard) {\r\n    return;\r\n  }\r\n  this.running = true;\r\n  this.handleScroll = this.handleScroll.bind(this);\r\n  window.addEventListener('scroll', this.handleScroll, false);\r\n};\r\n\r\n/**\r\n * Handle a scroll event, throttling to once every 100ms\r\n */\r\nLethe.prototype.handleScroll = function() {\r\n  if (this.scrollWaiting) {\r\n    return;\r\n  }\r\n  this.scrollWaiting = true;\r\n  setTimeout(this.updatePosts.bind(this), 100);\r\n};\r\n\r\n/**\r\n * Update the list of tracked posts, removing ones that are above/outside the\r\n * viewport and adding ones that are inside or below the viewport.\r\n */\r\nLethe.prototype.updatePosts = function() {\r\n  this.scrollWaiting = false;\r\n\r\n  var postMedias = document.querySelectorAll('.post_media');\r\n  var i;\r\n  for (i = 0; i < postMedias.length; i++) {\r\n    var postMedia = postMedias[i];\r\n    if (postMedia.querySelector('.playing')) {\r\n      continue;\r\n    }\r\n    var rect = postMedia.getBoundingClientRect();\r\n\r\n    if (rect.bottom > this.TOP_CUTOFF) {\r\n      // Rect is fully on screen, we want to keep it\r\n      break;\r\n    }\r\n    this.hidePost(postMedia);\r\n  }\r\n\r\n  for (i = this.hiddenPosts.length - 1; i > -1; i--) {\r\n    var hiddenMedia = this.hiddenPosts[i];\r\n    if (hiddenMedia.absoluteBottom < window.scrollY + this.TOP_CUTOFF) {\r\n      // hiddenMedia is higher than the current viewport\r\n      // all other posts should also be higher\r\n      break;\r\n    }\r\n    this.showPost(hiddenMedia);\r\n  }\r\n};\r\n\r\n/**\r\n * Hide a post, storing it for later\r\n * @param {DOMElement} post\r\n */\r\nLethe.prototype.hidePost = function(post) {\r\n  var rect = post.getBoundingClientRect();\r\n  var placeholder = document.createElement('div');\r\n  placeholder.classList.add('post_media');\r\n  placeholder.classList.add('post_media_hidden');\r\n  placeholder.style.width = rect.width + 'px';\r\n  placeholder.style.height = rect.height + 'px';\r\n\r\n  var parentNode = post.parentNode;\r\n  parentNode.replaceChild(placeholder, post);\r\n\r\n  var absoluteBottom = rect.bottom + window.scrollY;\r\n\r\n  this.hiddenPosts.push({\r\n    absoluteBottom: absoluteBottom,\r\n    html: post.outerHTML,\r\n    parent: parentNode\r\n  });\r\n};\r\n\r\n/**\r\n * Show a post, removing it from hidden posts\r\n * @param {DOMElement} hiddenPost\r\n */\r\nLethe.prototype.showPost = function(hiddenPost) {\r\n  // Overly conservative removal logic\r\n  this.hiddenPosts = this.hiddenPosts.filter(function(post) {\r\n    return post !== hiddenPost;\r\n  });\r\n  hiddenPost.parent.innerHTML = hiddenPost.html;\r\n};\r\n\r\n\r\n\r\n/**\r\n * Destroy Lethe\r\n */\r\nLethe.prototype.destroy = function() {\r\n  if (!this.running) {\r\n    return;\r\n  }\r\n  this.running = false;\r\n  window.removeEventListener('scroll', this.handleScroll, false);\r\n};\r\n","title":"Lethe","description":"Forgets posts once they scroll off the screen.","developer":"hobinjk","version":"1.1.1","frame":"false","beta":"true","file":"found","server":"up","errors":false,"slow":"false"}